{"version":3,"file":"static/js/21.ff2ce4a1.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/UserContacts-component/UserContacts.styled.js","components/InfoMessage-component/InfoMessage.styled.js","components/InfoMessage-component/InfoMessage.jsx","components/ContactsList-component/ContactListItem-component/ContactListItem.styled.js","components/ContactsList-component/ContactListItem-component/ContactListItem.jsx","components/ContactsList-component/ContactsList.styled.js","components/ContactsList-component/ContactsList.jsx","components/Filter-component/Filter.styled.js","components/Filter-component/Filter.jsx","components/Group-component/GroupComponent.jsx","components/ContactsForm-component/ContactsForm.styled.js","components/ContactsForm-component/ContactsForm.jsx","components/UserContacts-component/UserContacts.jsx","pages/Contacts.jsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import styled from 'styled-components';\n\nexport const MainTitle = styled.h1`\n  margin-bottom: 20px;\n  font-size: 40px;\n  line-height: 1.5;\n  text-align: center;\n  color: #0e294b;\n`;\n\nexport const Section = styled.section`\n  padding: 40px;\n`;\n\nexport const ContactsTitle = styled.h2`\n  margin-bottom: 28px;\n  font-size: 35px;\n  line-height: 1.5;\n  text-align: center;\n  color: #0e294b;\n`;\n\nexport const AccentMainTitle = styled.span`\n  color: #0047ab;\n`;\n","import styled from 'styled-components';\n\nexport const InfoMessageText = styled.p`\n  font-size: 24px;\n  font-weight: 500;\n  line-height: 1.5;\n  text-align: center;\n  color: ${({ $variant }) => {\n    switch ($variant) {\n      case 'primary':\n        return '#0047ab;';\n      default:\n        return '#fc0335';\n    }\n  }};\n`;\n","import { InfoMessageText } from './InfoMessage.styled';\n\nexport const InfoMessage = ({ text, $variant }) => (\n  <InfoMessageText $variant={$variant}>{text}</InfoMessageText>\n);\n","import styled from 'styled-components';\nimport { IoMdPerson } from 'react-icons/io';\n\nexport const ContactItem = styled.li`\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 20px;\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n`;\n\nexport const DeleteButton = styled.button`\n  flex-shrink: 0;\n  width: 100px;\n  font-size: 18px;\n  font-weight: 600;\n  line-height: 1.5;\n  border-radius: 25px;\n  background-color: #fff;\n  border: 2px solid #0047ab;\n  color: #0047ab;\n  padding: 6px;\n\n  &:hover,\n  &:focus {\n    background-color: #0047ab;\n    color: #fff;\n  }\n`;\n\nexport const ContactOfPeople = styled.p`\n  font-size: 24px;\n  font-weight: 500;\n  line-height: 1.5;\n  color: #0047ab;\n`;\n\nexport const PhoneNumber = styled.span`\n  color: #0e294b;\n`;\n\nexport const ContactWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 6px;\n`;\n\nexport const ContactIcon = styled(IoMdPerson)`\n  flex-shrink: 0;\n  fill: #0e294b;\n  width: 20px;\n  height: 20px;\n`;\n","import { deleteContact } from 'redux/contacts/operations';\nimport { useDispatch } from 'react-redux';\nimport {\n  ContactItem,\n  DeleteButton,\n  ContactOfPeople,\n  PhoneNumber,\n  ContactWrapper,\n  ContactIcon,\n} from './ContactListItem.styled';\n\nexport const ContactListItem = ({ contactId, contactName, contactNumber }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <ContactItem>\n      <ContactWrapper>\n        <ContactIcon />\n        <ContactOfPeople>\n          {contactName}: <PhoneNumber>{contactNumber}</PhoneNumber>\n        </ContactOfPeople>\n      </ContactWrapper>\n      <DeleteButton\n        type=\"button\"\n        onClick={() => dispatch(deleteContact(contactId))}\n      >\n        Delete\n      </DeleteButton>\n    </ContactItem>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ListOfContacts = styled.ul`\n  max-width: 550px;\n  margin-left: auto;\n  margin-right: auto;\n`;\n","import { useSelector } from 'react-redux';\nimport { ContactListItem } from './ContactListItem-component/ContactListItem';\nimport { ListOfContacts } from './ContactsList.styled';\nimport { selectVisibleContacts } from 'redux/contacts/selectors';\n\nexport const ContactsList = () => {\n  const visibleContacts = useSelector(selectVisibleContacts);\n\n  return (\n    <ListOfContacts>\n      {visibleContacts.map(({ id, name, number }) => (\n        <ContactListItem\n          key={id}\n          contactId={id}\n          contactName={name}\n          contactNumber={number}\n        />\n      ))}\n    </ListOfContacts>\n  );\n};\n","import styled from 'styled-components';\nimport { ImSearch } from 'react-icons/im';\n\nexport const FilterField = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  max-width: 550px;\n  margin-right: auto;\n  margin-left: auto;\n  margin-bottom: 40px;\n`;\n\nexport const FilterLabel = styled.span`\n  font-size: 18px;\n  font-weight: 600;\n  line-height: 1.5;\n  color: #0047ab;\n`;\n\nexport const FilterInput = styled.input`\n  padding: 12px 40px 12px 12px;\n  font-size: inherit;\n  border-radius: 25px;\n  border: 1px solid #bdbdbd;\n  outline: none;\n  width: 100%;\n\n  &:focus {\n    border: 1px solid #0047ab;\n  }\n`;\n\nexport const FilterWrapper = styled.div`\n  position: relative;\n`;\n\nexport const FilterIcon = styled(ImSearch)`\n  position: absolute;\n  top: 50%;\n  right: 16px;\n  transform: translateY(-50%);\n  fill: #0047ab;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport { setContactsFilter } from 'redux/contacts/filterSlice';\nimport {\n  FilterField,\n  FilterLabel,\n  FilterInput,\n  FilterWrapper,\n  FilterIcon,\n} from './Filter.styled';\n\nexport const Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const changeFilter = event => dispatch(setContactsFilter(event.target.value));\n\n  return (\n    <FilterField>\n      <FilterLabel>Find Contacts by name</FilterLabel>\n      <FilterWrapper>\n        <FilterInput\n          type=\"text\"\n          name=\"filter\"\n          value={filter}\n          onChange={changeFilter}\n        ></FilterInput>\n        <FilterIcon />\n      </FilterWrapper>\n    </FilterField>\n  );\n};\n","import { ContactsList } from 'components/ContactsList-component/ContactsList';\nimport { Filter } from 'components/Filter-component/Filter';\nimport { InfoMessage } from 'components/InfoMessage-component/InfoMessage';\nimport { useSelector } from 'react-redux';\nimport {\n  selectContacts,\n  selectVisibleContacts,\n  selectIsLoading,\n} from 'redux/contacts/selectors';\n\nexport const GroupComponent = () => {\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const visibleContacts = useSelector(selectVisibleContacts);\n\n  const variantOfText = () => {\n    if (!contacts.length && !isLoading) {\n      return (\n        <InfoMessage text=\"There are no contacts here 😲\" $variant=\"primary\" />\n      );\n    } else if (contacts.length && !visibleContacts.length) {\n      return (\n        <>\n          <Filter />\n          <InfoMessage\n            text=\"Sorry, we didn't find any contacts for this request 😢\"\n            $variant=\"secondary\"\n          />\n        </>\n      );\n    } else {\n      return (\n        <>\n          <Filter />\n          <ContactsList />\n        </>\n      );\n    }\n  };\n\n  return variantOfText();\n};\n","import {\n  Form as FormikForm,\n  Field as FormikField,\n  ErrorMessage as FormikError,\n} from 'formik';\nimport styled from 'styled-components';\n\nexport const Form = styled(FormikForm)`\n  display: flex;\n  flex-direction: column;\n  gap: 28px;\n  max-width: 550px;\n  margin-right: auto;\n  margin-left: auto;\n`;\n\nexport const Field = styled(FormikField)`\n  padding: 12px;\n  font-size: inherit;\n  border-radius: 25px;\n  border: 1px solid #bdbdbd;\n  outline: none;\n\n  &:focus {\n    border: 1px solid #0047ab;\n  }\n`;\n\nexport const FormGroup = styled.label`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const ErrorMessage = styled(FormikError)`\n  margin-top: 10px;\n  font-size: 14px;\n  color: #fc0335;\n`;\n\nexport const AddContactButton = styled.button`\n  width: 200px;\n  font-size: 20px;\n  font-weight: 600;\n  line-height: 1.5;\n  border-radius: 25px;\n  background-color: #fff;\n  border: 2px solid #0047ab;\n  color: #0047ab;\n  padding: 10px;\n  margin-right: auto;\n  margin-left: auto;\n\n  &:hover,\n  &:focus {\n    background-color: #0047ab;\n    color: #fff;\n  }\n`;\n\nexport const LabelText = styled.span`\n  font-size: 18px;\n  font-weight: 600;\n  line-height: 1.5;\n  margin-bottom: 5px;\n  color: #0047ab;\n`;\n","import { Formik } from 'formik';\nimport {\n  Form,\n  Field,\n  FormGroup,\n  ErrorMessage,\n  AddContactButton,\n  LabelText,\n} from './ContactsForm.styled';\nimport * as Yup from 'yup';\nimport toast from 'react-hot-toast';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\n\nconst validationSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, 'Name must contain at least 2 characters')\n    .max(40, 'Too long name')\n    .required('Name is required!'),\n  number: Yup.string()\n    .matches(/^\\+(?:[0-9] ?){6,14}[0-9]$/, {\n      message: 'Invalid Phone Number!',\n      excludeEmptyString: false,\n    })\n    .required('Phone number is required!')\n    .max(15, 'Invalid phone number!'),\n});\n\nexport const ContactsForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        number: '',\n      }}\n      validationSchema={validationSchema}\n      onSubmit={(values, actions) => {\n        actions.resetForm();\n        const contactAlreadyExist = contacts.some(\n          contact => contact.name.toLowerCase() === values.name.toLowerCase()\n        );\n\n        contactAlreadyExist\n          ? toast.error(`${values.name} is already in contacts!`)\n          : dispatch(addContact(values));\n      }}\n    >\n      <Form>\n        <FormGroup>\n          <LabelText>Name</LabelText>\n          <Field name=\"name\" type=\"text\" placeholder=\"Kate Simpson\" />\n          <ErrorMessage name=\"name\" component=\"span\" required />\n        </FormGroup>\n\n        <FormGroup>\n          <LabelText>Number</LabelText>\n          <Field name=\"number\" type=\"tel\" placeholder=\"+XX...\" />\n          <ErrorMessage name=\"number\" component=\"span\" required />\n        </FormGroup>\n\n        <AddContactButton type=\"submit\">Add contact</AddContactButton>\n      </Form>\n    </Formik>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectIsLoading, selectError } from 'redux/contacts/selectors';\nimport {\n  MainTitle,\n  Section,\n  ContactsTitle,\n  AccentMainTitle,\n} from './UserContacts.styled';\nimport { InfoMessage } from 'components/InfoMessage-component/InfoMessage';\nimport { GroupComponent } from 'components/Group-component/GroupComponent';\nimport { ContactsForm } from 'components/ContactsForm-component/ContactsForm';\n\nexport const UserContacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Section>\n        <MainTitle>\n          Phone<AccentMainTitle>book</AccentMainTitle>\n        </MainTitle>\n        <ContactsForm />\n      </Section>\n      <Section>\n        <ContactsTitle>Contacts</ContactsTitle>\n        {isLoading && !error && (\n          <InfoMessage text=\"Request in progress...\" $variant=\"primary\" />\n        )}\n        {error && (\n          <InfoMessage\n            text=\"Something went wrong. Try reloading the page 🥺\"\n            $variant=\"secondary\"\n          />\n        )}\n        {!isLoading && !error && <GroupComponent />}\n      </Section>\n    </>\n  );\n};\n","import { UserContacts } from 'components/UserContacts-component/UserContacts';\n\nconst ContactsPage = () => {\n  return <UserContacts />;\n};\n\nexport default ContactsPage;\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilter","filter","selectVisibleContacts","createSelector","contact","name","toLowerCase","includes","MainTitle","styled","_templateObject","_taggedTemplateLiteral","Section","_templateObject2","ContactsTitle","_templateObject3","AccentMainTitle","_templateObject4","InfoMessageText","_ref","$variant","InfoMessage","text","_jsx","children","ContactItem","DeleteButton","ContactOfPeople","PhoneNumber","ContactWrapper","_templateObject5","ContactIcon","IoMdPerson","_templateObject6","ContactListItem","contactId","contactName","contactNumber","dispatch","useDispatch","_jsxs","type","onClick","deleteContact","ListOfContacts","ContactsList","visibleContacts","useSelector","map","id","number","FilterField","FilterLabel","FilterInput","FilterWrapper","FilterIcon","ImSearch","Filter","value","onChange","event","setContactsFilter","target","GroupComponent","length","_Fragment","Form","FormikForm","Field","FormikField","FormGroup","ErrorMessage","FormikError","AddContactButton","LabelText","validationSchema","Yup","shape","min","max","required","matches","message","excludeEmptyString","ContactsForm","Formik","initialValues","onSubmit","values","actions","resetForm","some","toast","concat","addContact","placeholder","component","UserContacts","useEffect","fetchContacts"],"sourceRoot":""}